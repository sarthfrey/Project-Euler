// Computes the greatest product of any 13 adjacent single digit numbers in the int series
public class Euler8 {
	public static void main(String[] args) {
		long largestProduct = 0L;
		String instanceSubString;
		long instanceProduct = 1L;
		String series = "73167176531330624919225119674426574742355349194934";
		series += "96983520312774506326239578318016984801869478851843";
		series += "85861560789112949495459501737958331952853208805511";
		series += "12540698747158523863050715693290963295227443043557";
		series += "66896648950445244523161731856403098711121722383113";
		series += "62229893423380308135336276614282806444486645238749";
		series += "30358907296290491560440772390713810515859307960866";
		series += "70172427121883998797908792274921901699720888093776";
		series += "65727333001053367881220235421809751254540594752243";
		series += "52584907711670556013604839586446706324415722155397";
		series += "53697817977846174064955149290862569321978468622482";
		series += "83972241375657056057490261407972968652414535100474";
		series += "82166370484403199890008895243450658541227588666881";
		series += "16427171479924442928230863465674813919123162824586";
		series += "17866458359124566529476545682848912883142607690042";
		series += "24219022671055626321111109370544217506941658960408";
		series += "07198403850962455444362981230987879927244284909188";
		series += "84580156166097919133875499200524063689912560717606";
		series += "05886116467109405077541002256983155200055935729725";
		series += "71636269561882670428252483600823257530420752963450";
		for (int i = 0; i <= series.length() - 13; i++) {
			instanceProduct = 1L;
			instanceSubString = series.substring(i, i + 13);
			for (int j = 0; j < 13; j++) {
				instanceProduct *= Long.parseLong(instanceSubString.substring(j, j + 1));
			}
			if (instanceProduct > largestProduct) {
				largestProduct = instanceProduct;
			}
		}
		System.out.println(largestProduct);
	}
}
// Prints 23514624000